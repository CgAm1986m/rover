//
//  ControlInteractor.swift
//  Rover
//
//  Created by Aratech iOS on 23/2/18.
//  Copyright (c) 2018 Aratech iOS. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreMotion

protocol ControlBusinessLogic {
	func doSomething(request: Control.Something.Request)
    func setSetting(request: Control.SetSetting.Request)
}

protocol ControlDataStore {
	//var name: String { get set }
}

class ControlInteractor: ControlBusinessLogic, ControlDataStore {
	
	var presenter: ControlPresentationLogic?
	var worker: ControlWorker?
	//var name: String = ""
	
    //Accelerometer
    let motionManager = CMMotionManager()
    var timer: Timer = Timer()
    
    var accelerationX: Double = 0.0
    var accelerationY: Double = 0.0
    
    var margen = 6.0
    
    init() {
      
//        Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true, block: self.updatePosition(_:))
    }
    
    // MARK: Logic
	
	func doSomething(request: Control.Something.Request) {
		worker = ControlWorker()
		worker?.doSomeWork()
		
		let response = Control.Something.Response()
		presenter?.presentSomething(response: response)
	}
    
    func setSetting(request: Control.SetSetting.Request) {
        self.setAccelerometer()
    }
    
    //Funciones juego
    
    func updatePosition(timer: Timer) {
        if let accelerometerData = motionManager.accelerometerData {
            print(accelerometerData)
            if let data = self.motionManager.accelerometerData {
//                let x = data.acceleration.x
                let y = data.acceleration.y
                
                if self.margen < (self.accelerationY-y) || self.margen > (self.accelerationY+y) {
                    self.accelerationY = y
                    self.moveRover()
                }
                // Use the accelerometer data in your app.
            }
        }
    }
    
    func moveRover() {
        
    }
    
    //Funciones de configuraci√≥n
    func setAccelerometer() {
        if self.motionManager.isAccelerometerAvailable {
            self.motionManager.accelerometerUpdateInterval = 1.0 / 60.0  // 60 Hz
            self.motionManager.startAccelerometerUpdates()
        } else {
            //aviso de problemas
        }
    }
}
